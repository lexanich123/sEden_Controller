//
// Generated file, do not edit! Created by nedtool 5.4 from other/timer.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __TIMER_M_H
#define __TIMER_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



class timer;
/**
 * Enum generated from <tt>other/timer.msg:15</tt> by nedtool.
 * <pre>
 * //
 * // This program is free software: you can redistribute it and/or modify
 * // it under the terms of the GNU Lesser General Public License as published by
 * // the Free Software Foundation, either version 3 of the License, or
 * // (at your option) any later version.
 * // 
 * // This program is distributed in the hope that it will be useful,
 * // but WITHOUT ANY WARRANTY; without even the implied warranty of
 * // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * // GNU Lesser General Public License for more details.
 * // 
 * // You should have received a copy of the GNU Lesser General Public License
 * // along with this program.  If not, see http://www.gnu.org/licenses/.
 * //
 * enum kind
 * {
 *     ECHO_INTERVAL_TIMER = 0;
 *     ECHO_CANCEL_TIMER = 1;
 *     PORT_BLOCK_TIMER = 2;
 *     FEATURE_WAIT_TIMER = 3;
 *     HELLO_WAIT_TIMER = 4;
 * }
 * </pre>
 */
enum kind {
    ECHO_INTERVAL_TIMER = 0,
    ECHO_CANCEL_TIMER = 1,
    PORT_BLOCK_TIMER = 2,
    FEATURE_WAIT_TIMER = 3,
    HELLO_WAIT_TIMER = 4
};

/**
 * Class generated from <tt>other/timer.msg:22</tt> by nedtool.
 * <pre>
 * message timer
 * {
 *     uint8_t type;
 *     int connId;
 * }
 * </pre>
 */
class timer : public ::omnetpp::cMessage
{
  protected:
    uint8_t type = 0;
    int connId = 0;

  private:
    void copy(const timer& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const timer&);

  public:
    timer(const char *name=nullptr, short kind=0);
    timer(const timer& other);
    virtual ~timer();
    timer& operator=(const timer& other);
    virtual timer *dup() const override {return new timer(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual uint8_t getType() const;
    virtual void setType(uint8_t type);
    virtual int getConnId() const;
    virtual void setConnId(int connId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const timer& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, timer& obj) {obj.parsimUnpack(b);}

#endif // ifndef __TIMER_M_H

