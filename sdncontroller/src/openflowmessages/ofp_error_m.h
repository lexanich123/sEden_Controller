//
// Generated file, do not edit! Created by nedtool 5.4 from openflowmessages/ofp_error.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __INET_OFP_ERROR_M_H
#define __INET_OFP_ERROR_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


namespace inet {

class Ofp_error;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/Units_m.h" // import inet.common.Units

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk


namespace inet {

/**
 * Enum generated from <tt>openflowmessages/ofp_error.msg:21</tt> by nedtool.
 * <pre>
 * enum Ofp_er_type
 * {
 *     HELLO_FAILED = 0X0000;
 *     BAD_REQUEST = 0X0001;
 *     BAD_ACTION = 0X0002;
 *     FLOW_MOD_FAILED = 0X0003;
 *     PORT_MOD_FAILED = 0X0004;
 *     QUEUE_OP_FAILED = 0X0005;
 * }
 * </pre>
 */
enum Ofp_er_type {
    HELLO_FAILED = 0X0000,
    BAD_REQUEST = 0X0001,
    BAD_ACTION = 0X0002,
    FLOW_MOD_FAILED = 0X0003,
    PORT_MOD_FAILED = 0X0004,
    QUEUE_OP_FAILED = 0X0005
};

/**
 * Enum generated from <tt>openflowmessages/ofp_error.msg:29</tt> by nedtool.
 * <pre>
 * enum Of_hf_er_code
 * {
 *     //HF
 *     HF_INCOMPATIBLE = 0X0000;
 *     HF_EPERM = 0X0001;
 * }
 * </pre>
 */
enum Of_hf_er_code {
    HF_INCOMPATIBLE = 0X0000,
    HF_EPERM = 0X0001
};

/**
 * Enum generated from <tt>openflowmessages/ofp_error.msg:34</tt> by nedtool.
 * <pre>
 * enum Of_br_er_code
 * {
 *     //BR
 *     BR_BAD_VERSION = 0X0000;
 *     BR_BAD_TYPE = 0X0001;
 *     BR_BAD_STAT = 0X0002;
 *     BR_BAD_VENDOR = 0X0003;
 *     BR_BAD_SUBTYPE = 0X0004;
 *     BR_EPERM = 0X0005;
 *     BR_BAD_LENGTH = 0X0006;
 *     BR_BUFFER_EMPTY = 0X0007;
 *     BR_BUFFER_UKNOWN = 0X0008;
 * }
 * </pre>
 */
enum Of_br_er_code {
    BR_BAD_VERSION = 0X0000,
    BR_BAD_TYPE = 0X0001,
    BR_BAD_STAT = 0X0002,
    BR_BAD_VENDOR = 0X0003,
    BR_BAD_SUBTYPE = 0X0004,
    BR_EPERM = 0X0005,
    BR_BAD_LENGTH = 0X0006,
    BR_BUFFER_EMPTY = 0X0007,
    BR_BUFFER_UKNOWN = 0X0008
};

/**
 * Enum generated from <tt>openflowmessages/ofp_error.msg:46</tt> by nedtool.
 * <pre>
 * enum Of_ba_er_code
 * {
 *     //BA
 *     BA_BAD_TYPE = 0X0000;
 *     BA_BAD_LENGTH = 0X0001;
 *     BA_BAD_VENDOR = 0X0002;
 *     BA_BAD_VENDOR_TYPE = 0X0003;
 *     BA_BAD_OUT_PORT = 0X0004;
 *     BA_BAD_ARGUMENTS = 0X0005;
 *     BA_EPERM = 0X0006;
 *     BA_TOO_MANY = 0X0007;
 *     BA_BAD_QUEUE = 0X0008;
 * }
 * </pre>
 */
enum Of_ba_er_code {
    BA_BAD_TYPE = 0X0000,
    BA_BAD_LENGTH = 0X0001,
    BA_BAD_VENDOR = 0X0002,
    BA_BAD_VENDOR_TYPE = 0X0003,
    BA_BAD_OUT_PORT = 0X0004,
    BA_BAD_ARGUMENTS = 0X0005,
    BA_EPERM = 0X0006,
    BA_TOO_MANY = 0X0007,
    BA_BAD_QUEUE = 0X0008
};

/**
 * Enum generated from <tt>openflowmessages/ofp_error.msg:58</tt> by nedtool.
 * <pre>
 * enum Of_ofmf_er_code
 * {
 *     //OFMF
 *     FMF_ALL_TABLES_FULL = 0x0000;
 *     FMF_OVERLAP = 0x0001;
 *     FMF_EPERM = 0x0002;
 *     FMF_BAD_EMERG_TIMEOUT = 0x0003;
 *     FMF_BAD_COMMAND = 0x0004;
 *     FMF_UNSUPPORTED = 0x0005;
 * }
 * </pre>
 */
enum Of_ofmf_er_code {
    FMF_ALL_TABLES_FULL = 0x0000,
    FMF_OVERLAP = 0x0001,
    FMF_EPERM = 0x0002,
    FMF_BAD_EMERG_TIMEOUT = 0x0003,
    FMF_BAD_COMMAND = 0x0004,
    FMF_UNSUPPORTED = 0x0005
};

/**
 * Enum generated from <tt>openflowmessages/ofp_error.msg:67</tt> by nedtool.
 * <pre>
 * enum Of_opmf_er_code
 * {
 *     //OPMF
 *     PMF_BAD_PORT = 0x0001;
 *     PMF_BAD_HW_ADDR = 0x0002;
 * }
 * </pre>
 */
enum Of_opmf_er_code {
    PMF_BAD_PORT = 0x0001,
    PMF_BAD_HW_ADDR = 0x0002
};

/**
 * Enum generated from <tt>openflowmessages/ofp_error.msg:72</tt> by nedtool.
 * <pre>
 * enum Of_oqof_er_code
 * {
 *     //OQOF
 *     QOF_BAD_PORT = 0x0000;
 *     QOF_BAD_QUEUE = 0x0001;
 *     QOF_EPERM = 0x0002;
 * }
 * </pre>
 */
enum Of_oqof_er_code {
    QOF_BAD_PORT = 0x0000,
    QOF_BAD_QUEUE = 0x0001,
    QOF_EPERM = 0x0002
};

/**
 * Class generated from <tt>openflowmessages/ofp_error.msg:79</tt> by nedtool.
 * <pre>
 * class Ofp_error extends FieldsChunk
 * {
 *     uint16_t type;
 *     uint16_t code;
 * 
 *     chunkLength = B(4);
 * }
 * </pre>
 */
class Ofp_error : public ::inet::FieldsChunk
{
  protected:
    uint16_t type = 0;
    uint16_t code = 0;

  private:
    void copy(const Ofp_error& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Ofp_error&);

  public:
    Ofp_error();
    Ofp_error(const Ofp_error& other);
    virtual ~Ofp_error();
    Ofp_error& operator=(const Ofp_error& other);
    virtual Ofp_error *dup() const override {return new Ofp_error(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual uint16_t getType() const;
    virtual void setType(uint16_t type);
    virtual uint16_t getCode() const;
    virtual void setCode(uint16_t code);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ofp_error& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ofp_error& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_OFP_ERROR_M_H

