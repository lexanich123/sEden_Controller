//
// Generated file, do not edit! Created by nedtool 5.4 from openflowmessages/ofp_flow_mod.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __INET_OFP_FLOW_MOD_M_H
#define __INET_OFP_FLOW_MOD_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


namespace inet {

class Ofp_flow_mod;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/Units_m.h" // import inet.common.Units

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk


namespace inet {

/**
 * Enum generated from <tt>openflowmessages/ofp_flow_mod.msg:21</tt> by nedtool.
 * <pre>
 * enum ofp_flow_mod_command
 * {
 *     OFPFC_ADD = 0x0000;
 *     OFPFC_MODIFY = 0x0001;
 *     OFPFC_MODIFY_STRICT = 0x0002;
 *     OFPFC_DELETE = 0x0003;
 *     OFPFC_DELETE_STRICT = 0x0004;
 * }
 * </pre>
 */
enum ofp_flow_mod_command {
    OFPFC_ADD = 0x0000,
    OFPFC_MODIFY = 0x0001,
    OFPFC_MODIFY_STRICT = 0x0002,
    OFPFC_DELETE = 0x0003,
    OFPFC_DELETE_STRICT = 0x0004
};

/**
 * Class generated from <tt>openflowmessages/ofp_flow_mod.msg:29</tt> by nedtool.
 * <pre>
 * class Ofp_flow_mod extends FieldsChunk
 * {
 *     uint64_t cookie;
 *     uint16_t command;
 *     uint16_t idle_timeout;
 *     uint16_t hard_timeout;
 *     uint16_t priority;
 *     uint32_t buffer_id;
 *     uint16_t out_port;
 *     uint16_t flags;
 *     chunkLength = B(24);
 * }
 * </pre>
 */
class Ofp_flow_mod : public ::inet::FieldsChunk
{
  protected:
    uint64_t cookie = 0;
    uint16_t command = 0;
    uint16_t idle_timeout = 0;
    uint16_t hard_timeout = 0;
    uint16_t priority = 0;
    uint32_t buffer_id = 0;
    uint16_t out_port = 0;
    uint16_t flags = 0;

  private:
    void copy(const Ofp_flow_mod& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Ofp_flow_mod&);

  public:
    Ofp_flow_mod();
    Ofp_flow_mod(const Ofp_flow_mod& other);
    virtual ~Ofp_flow_mod();
    Ofp_flow_mod& operator=(const Ofp_flow_mod& other);
    virtual Ofp_flow_mod *dup() const override {return new Ofp_flow_mod(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual uint64_t getCookie() const;
    virtual void setCookie(uint64_t cookie);
    virtual uint16_t getCommand() const;
    virtual void setCommand(uint16_t command);
    virtual uint16_t getIdle_timeout() const;
    virtual void setIdle_timeout(uint16_t idle_timeout);
    virtual uint16_t getHard_timeout() const;
    virtual void setHard_timeout(uint16_t hard_timeout);
    virtual uint16_t getPriority() const;
    virtual void setPriority(uint16_t priority);
    virtual uint32_t getBuffer_id() const;
    virtual void setBuffer_id(uint32_t buffer_id);
    virtual uint16_t getOut_port() const;
    virtual void setOut_port(uint16_t out_port);
    virtual uint16_t getFlags() const;
    virtual void setFlags(uint16_t flags);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ofp_flow_mod& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ofp_flow_mod& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_OFP_FLOW_MOD_M_H

