//
// Generated file, do not edit! Created by nedtool 5.4 from openflowmessages/ofp_actions.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __INET_OFP_ACTIONS_M_H
#define __INET_OFP_ACTIONS_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


namespace inet {

class Ofp_action_head;
class Ofp_output_action;
class Ofp_enqueue_action;
class Ofp_setvlanvid_action;
class Ofp_setnwaddr_action;
class Ofp_vendor_action;
class Ofp_setvlanpcp_action;
class Ofp_setnwtos_action;
class Ofp_setdladdr_action;
class Ofp_settcport_action;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/Units_m.h" // import inet.common.Units

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/linklayer/common/MacAddress_m.h" // import inet.linklayer.common.MacAddress

#include "inet/networklayer/contract/ipv4/Ipv4Address_m.h" // import inet.networklayer.contract.ipv4.Ipv4Address


namespace inet {

/**
 * Enum generated from <tt>openflowmessages/ofp_actions.msg:23</tt> by nedtool.
 * <pre>
 * enum action_type
 * {
 *     OUTPUT_ACTION = 0x0000;
 *     SET_VLAN_VID = 0x0001;
 *     SET_VLAN_PCP = 0x0002;
 *     STRIP_VLAN = 0x0003;
 *     SET_DL_SRC = 0x0004;
 *     SET_DL_DST = 0x0005;
 *     SET_NW_SRC = 0x0006;
 *     SET_NW_DST = 0x0007;
 *     SET_NW_TOS = 0x0008;
 *     SET_TP_SRC = 0x0009;
 *     SET_TP_DST = 0x000a;
 *     ENQUEUE_ACTION = 0x000b;
 *     VENDOR_ACTION = 0xffff;
 * }
 * </pre>
 */
enum action_type {
    OUTPUT_ACTION = 0x0000,
    SET_VLAN_VID = 0x0001,
    SET_VLAN_PCP = 0x0002,
    STRIP_VLAN = 0x0003,
    SET_DL_SRC = 0x0004,
    SET_DL_DST = 0x0005,
    SET_NW_SRC = 0x0006,
    SET_NW_DST = 0x0007,
    SET_NW_TOS = 0x0008,
    SET_TP_SRC = 0x0009,
    SET_TP_DST = 0x000a,
    ENQUEUE_ACTION = 0x000b,
    VENDOR_ACTION = 0xffff
};

/**
 * Class generated from <tt>openflowmessages/ofp_actions.msg:40</tt> by nedtool.
 * <pre>
 * class Ofp_action_head extends FieldsChunk
 * {
 *     uint16_t type;
 *     uint16_t length;
 *     chunkLength = B(4);
 * }
 * 
 * ////////////////////PAYLOADS_ACTIONS/////////////////////
 * </pre>
 */
class Ofp_action_head : public ::inet::FieldsChunk
{
  protected:
    uint16_t type = 0;
    uint16_t length = 0;

  private:
    void copy(const Ofp_action_head& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Ofp_action_head&);

  public:
    Ofp_action_head();
    Ofp_action_head(const Ofp_action_head& other);
    virtual ~Ofp_action_head();
    Ofp_action_head& operator=(const Ofp_action_head& other);
    virtual Ofp_action_head *dup() const override {return new Ofp_action_head(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual uint16_t getType() const;
    virtual void setType(uint16_t type);
    virtual uint16_t getLength() const;
    virtual void setLength(uint16_t length);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ofp_action_head& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ofp_action_head& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>openflowmessages/ofp_actions.msg:48</tt> by nedtool.
 * <pre>
 * class Ofp_output_action extends FieldsChunk
 * {
 *     uint16_t port;
 *     uint16_t max_len;
 *     chunkLength = B(4);
 * }
 * </pre>
 */
class Ofp_output_action : public ::inet::FieldsChunk
{
  protected:
    uint16_t port = 0;
    uint16_t max_len = 0;

  private:
    void copy(const Ofp_output_action& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Ofp_output_action&);

  public:
    Ofp_output_action();
    Ofp_output_action(const Ofp_output_action& other);
    virtual ~Ofp_output_action();
    Ofp_output_action& operator=(const Ofp_output_action& other);
    virtual Ofp_output_action *dup() const override {return new Ofp_output_action(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual uint16_t getPort() const;
    virtual void setPort(uint16_t port);
    virtual uint16_t getMax_len() const;
    virtual void setMax_len(uint16_t max_len);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ofp_output_action& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ofp_output_action& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>openflowmessages/ofp_actions.msg:53</tt> by nedtool.
 * <pre>
 * class Ofp_enqueue_action extends FieldsChunk
 * {
 *     uint16_t port;
 *     uint16_t pad1 = 0;
 *     uint32_t pad2 = 0;
 *     uint32_t queue_id;
 *     chunkLength = B(6);
 * }
 * </pre>
 */
class Ofp_enqueue_action : public ::inet::FieldsChunk
{
  protected:
    uint16_t port = 0;
    uint16_t pad1 = 0;
    uint32_t pad2 = 0;
    uint32_t queue_id = 0;

  private:
    void copy(const Ofp_enqueue_action& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Ofp_enqueue_action&);

  public:
    Ofp_enqueue_action();
    Ofp_enqueue_action(const Ofp_enqueue_action& other);
    virtual ~Ofp_enqueue_action();
    Ofp_enqueue_action& operator=(const Ofp_enqueue_action& other);
    virtual Ofp_enqueue_action *dup() const override {return new Ofp_enqueue_action(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual uint16_t getPort() const;
    virtual void setPort(uint16_t port);
    virtual uint16_t getPad1() const;
    virtual void setPad1(uint16_t pad1);
    virtual uint32_t getPad2() const;
    virtual void setPad2(uint32_t pad2);
    virtual uint32_t getQueue_id() const;
    virtual void setQueue_id(uint32_t queue_id);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ofp_enqueue_action& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ofp_enqueue_action& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>openflowmessages/ofp_actions.msg:60</tt> by nedtool.
 * <pre>
 * class Ofp_setvlanvid_action extends FieldsChunk
 * {
 *     uint16_t vlan_vid;
 *     uint16_t pad = 0;
 *     chunkLength = B(4);
 * }
 * </pre>
 */
class Ofp_setvlanvid_action : public ::inet::FieldsChunk
{
  protected:
    uint16_t vlan_vid = 0;
    uint16_t pad = 0;

  private:
    void copy(const Ofp_setvlanvid_action& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Ofp_setvlanvid_action&);

  public:
    Ofp_setvlanvid_action();
    Ofp_setvlanvid_action(const Ofp_setvlanvid_action& other);
    virtual ~Ofp_setvlanvid_action();
    Ofp_setvlanvid_action& operator=(const Ofp_setvlanvid_action& other);
    virtual Ofp_setvlanvid_action *dup() const override {return new Ofp_setvlanvid_action(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual uint16_t getVlan_vid() const;
    virtual void setVlan_vid(uint16_t vlan_vid);
    virtual uint16_t getPad() const;
    virtual void setPad(uint16_t pad);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ofp_setvlanvid_action& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ofp_setvlanvid_action& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>openflowmessages/ofp_actions.msg:65</tt> by nedtool.
 * <pre>
 * class Ofp_setnwaddr_action extends FieldsChunk
 * {
 *     Ipv4Address nw_addr;
 *     chunkLength = B(4);
 * }
 * </pre>
 */
class Ofp_setnwaddr_action : public ::inet::FieldsChunk
{
  protected:
    Ipv4Address nw_addr;

  private:
    void copy(const Ofp_setnwaddr_action& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Ofp_setnwaddr_action&);

  public:
    Ofp_setnwaddr_action();
    Ofp_setnwaddr_action(const Ofp_setnwaddr_action& other);
    virtual ~Ofp_setnwaddr_action();
    Ofp_setnwaddr_action& operator=(const Ofp_setnwaddr_action& other);
    virtual Ofp_setnwaddr_action *dup() const override {return new Ofp_setnwaddr_action(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const Ipv4Address& getNw_addr() const;
    virtual Ipv4Address& getNw_addrForUpdate() { handleChange();return const_cast<Ipv4Address&>(const_cast<Ofp_setnwaddr_action*>(this)->getNw_addr());}
    virtual void setNw_addr(const Ipv4Address& nw_addr);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ofp_setnwaddr_action& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ofp_setnwaddr_action& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>openflowmessages/ofp_actions.msg:69</tt> by nedtool.
 * <pre>
 * class Ofp_vendor_action extends FieldsChunk
 * {
 *     uint32_t vendor;
 *     chunkLength = B(4);
 * }
 * </pre>
 */
class Ofp_vendor_action : public ::inet::FieldsChunk
{
  protected:
    uint32_t vendor = 0;

  private:
    void copy(const Ofp_vendor_action& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Ofp_vendor_action&);

  public:
    Ofp_vendor_action();
    Ofp_vendor_action(const Ofp_vendor_action& other);
    virtual ~Ofp_vendor_action();
    Ofp_vendor_action& operator=(const Ofp_vendor_action& other);
    virtual Ofp_vendor_action *dup() const override {return new Ofp_vendor_action(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual uint32_t getVendor() const;
    virtual void setVendor(uint32_t vendor);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ofp_vendor_action& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ofp_vendor_action& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>openflowmessages/ofp_actions.msg:73</tt> by nedtool.
 * <pre>
 * class Ofp_setvlanpcp_action extends FieldsChunk
 * {
 *     uint8_t vlan_pc;
 *     uint8_t pad1 = 0;
 *     uint16_t pad2 = 0;
 *     chunkLength = B(4);
 * }
 * </pre>
 */
class Ofp_setvlanpcp_action : public ::inet::FieldsChunk
{
  protected:
    uint8_t vlan_pc = 0;
    uint8_t pad1 = 0;
    uint16_t pad2 = 0;

  private:
    void copy(const Ofp_setvlanpcp_action& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Ofp_setvlanpcp_action&);

  public:
    Ofp_setvlanpcp_action();
    Ofp_setvlanpcp_action(const Ofp_setvlanpcp_action& other);
    virtual ~Ofp_setvlanpcp_action();
    Ofp_setvlanpcp_action& operator=(const Ofp_setvlanpcp_action& other);
    virtual Ofp_setvlanpcp_action *dup() const override {return new Ofp_setvlanpcp_action(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual uint8_t getVlan_pc() const;
    virtual void setVlan_pc(uint8_t vlan_pc);
    virtual uint8_t getPad1() const;
    virtual void setPad1(uint8_t pad1);
    virtual uint16_t getPad2() const;
    virtual void setPad2(uint16_t pad2);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ofp_setvlanpcp_action& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ofp_setvlanpcp_action& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>openflowmessages/ofp_actions.msg:79</tt> by nedtool.
 * <pre>
 * class Ofp_setnwtos_action extends FieldsChunk
 * {
 *     uint8_t nw_tos;
 *     uint8_t pad1 = 0;
 *     uint16_t pad2 = 0;
 *     chunkLength = B(4);
 * }
 * </pre>
 */
class Ofp_setnwtos_action : public ::inet::FieldsChunk
{
  protected:
    uint8_t nw_tos = 0;
    uint8_t pad1 = 0;
    uint16_t pad2 = 0;

  private:
    void copy(const Ofp_setnwtos_action& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Ofp_setnwtos_action&);

  public:
    Ofp_setnwtos_action();
    Ofp_setnwtos_action(const Ofp_setnwtos_action& other);
    virtual ~Ofp_setnwtos_action();
    Ofp_setnwtos_action& operator=(const Ofp_setnwtos_action& other);
    virtual Ofp_setnwtos_action *dup() const override {return new Ofp_setnwtos_action(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual uint8_t getNw_tos() const;
    virtual void setNw_tos(uint8_t nw_tos);
    virtual uint8_t getPad1() const;
    virtual void setPad1(uint8_t pad1);
    virtual uint16_t getPad2() const;
    virtual void setPad2(uint16_t pad2);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ofp_setnwtos_action& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ofp_setnwtos_action& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>openflowmessages/ofp_actions.msg:85</tt> by nedtool.
 * <pre>
 * class Ofp_setdladdr_action extends FieldsChunk
 * {
 *     MacAddress dl_addr;
 *     uint16_t pad1 = 0;
 *     uint32_t pad2 = 0;
 *     chunkLength = B(12);
 * }
 * </pre>
 */
class Ofp_setdladdr_action : public ::inet::FieldsChunk
{
  protected:
    MacAddress dl_addr;
    uint16_t pad1 = 0;
    uint32_t pad2 = 0;

  private:
    void copy(const Ofp_setdladdr_action& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Ofp_setdladdr_action&);

  public:
    Ofp_setdladdr_action();
    Ofp_setdladdr_action(const Ofp_setdladdr_action& other);
    virtual ~Ofp_setdladdr_action();
    Ofp_setdladdr_action& operator=(const Ofp_setdladdr_action& other);
    virtual Ofp_setdladdr_action *dup() const override {return new Ofp_setdladdr_action(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const MacAddress& getDl_addr() const;
    virtual MacAddress& getDl_addrForUpdate() { handleChange();return const_cast<MacAddress&>(const_cast<Ofp_setdladdr_action*>(this)->getDl_addr());}
    virtual void setDl_addr(const MacAddress& dl_addr);
    virtual uint16_t getPad1() const;
    virtual void setPad1(uint16_t pad1);
    virtual uint32_t getPad2() const;
    virtual void setPad2(uint32_t pad2);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ofp_setdladdr_action& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ofp_setdladdr_action& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>openflowmessages/ofp_actions.msg:91</tt> by nedtool.
 * <pre>
 * class Ofp_settcport_action extends FieldsChunk
 * {
 *     uint16_t port;
 *     uint16_t pad;
 *     chunkLength = B(4);
 * }
 * </pre>
 */
class Ofp_settcport_action : public ::inet::FieldsChunk
{
  protected:
    uint16_t port = 0;
    uint16_t pad = 0;

  private:
    void copy(const Ofp_settcport_action& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Ofp_settcport_action&);

  public:
    Ofp_settcport_action();
    Ofp_settcport_action(const Ofp_settcport_action& other);
    virtual ~Ofp_settcport_action();
    Ofp_settcport_action& operator=(const Ofp_settcport_action& other);
    virtual Ofp_settcport_action *dup() const override {return new Ofp_settcport_action(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual uint16_t getPort() const;
    virtual void setPort(uint16_t port);
    virtual uint16_t getPad() const;
    virtual void setPad(uint16_t pad);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ofp_settcport_action& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ofp_settcport_action& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_OFP_ACTIONS_M_H

