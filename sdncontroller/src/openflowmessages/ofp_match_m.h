//
// Generated file, do not edit! Created by nedtool 5.4 from openflowmessages/ofp_match.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __INET_OFP_MATCH_M_H
#define __INET_OFP_MATCH_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


namespace inet {

class Ofp_match;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/Units_m.h" // import inet.common.Units

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/linklayer/common/MacAddress_m.h" // import inet.linklayer.common.MacAddress

#include "inet/networklayer/contract/ipv4/Ipv4Address_m.h" // import inet.networklayer.contract.ipv4.Ipv4Address


namespace inet {

/**
 * Class generated from <tt>openflowmessages/ofp_match.msg:23</tt> by nedtool.
 * <pre>
 * class Ofp_match extends FieldsChunk
 * {
 *     uint32_t wildcards;
 *     uint16_t in_port;
 *     MacAddress dl_src;
 *     MacAddress dl_dst;
 *     uint16_t dl_vlan;
 *     uint8_t dl_vlan_pcp;
 *     uint8_t pad1[1];
 *     uint16_t dl_type;
 *     uint8_t nw_tos;
 *     uint8_t nw_proto;
 *     uint8_t pad2[2];
 *     Ipv4Address nw_src;
 *     Ipv4Address nw_dst;
 *     uint16_t tp_src;
 *     uint16_t tp_dst;
 * 
 *     chunkLength = B(40);
 * }
 * </pre>
 */
class Ofp_match : public ::inet::FieldsChunk
{
  protected:
    uint32_t wildcards = 0;
    uint16_t in_port = 0;
    MacAddress dl_src;
    MacAddress dl_dst;
    uint16_t dl_vlan = 0;
    uint8_t dl_vlan_pcp = 0;
    uint8_t pad1[1] = {0};
    uint16_t dl_type = 0;
    uint8_t nw_tos = 0;
    uint8_t nw_proto = 0;
    uint8_t pad2[2] = {0};
    Ipv4Address nw_src;
    Ipv4Address nw_dst;
    uint16_t tp_src = 0;
    uint16_t tp_dst = 0;

  private:
    void copy(const Ofp_match& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Ofp_match&);

  public:
    Ofp_match();
    Ofp_match(const Ofp_match& other);
    virtual ~Ofp_match();
    Ofp_match& operator=(const Ofp_match& other);
    virtual Ofp_match *dup() const override {return new Ofp_match(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual uint32_t getWildcards() const;
    virtual void setWildcards(uint32_t wildcards);
    virtual uint16_t getIn_port() const;
    virtual void setIn_port(uint16_t in_port);
    virtual const MacAddress& getDl_src() const;
    virtual MacAddress& getDl_srcForUpdate() { handleChange();return const_cast<MacAddress&>(const_cast<Ofp_match*>(this)->getDl_src());}
    virtual void setDl_src(const MacAddress& dl_src);
    virtual const MacAddress& getDl_dst() const;
    virtual MacAddress& getDl_dstForUpdate() { handleChange();return const_cast<MacAddress&>(const_cast<Ofp_match*>(this)->getDl_dst());}
    virtual void setDl_dst(const MacAddress& dl_dst);
    virtual uint16_t getDl_vlan() const;
    virtual void setDl_vlan(uint16_t dl_vlan);
    virtual uint8_t getDl_vlan_pcp() const;
    virtual void setDl_vlan_pcp(uint8_t dl_vlan_pcp);
    virtual size_t getPad1ArraySize() const;
    virtual uint8_t getPad1(size_t k) const;
    virtual void setPad1(size_t k, uint8_t pad1);
    virtual uint16_t getDl_type() const;
    virtual void setDl_type(uint16_t dl_type);
    virtual uint8_t getNw_tos() const;
    virtual void setNw_tos(uint8_t nw_tos);
    virtual uint8_t getNw_proto() const;
    virtual void setNw_proto(uint8_t nw_proto);
    virtual size_t getPad2ArraySize() const;
    virtual uint8_t getPad2(size_t k) const;
    virtual void setPad2(size_t k, uint8_t pad2);
    virtual const Ipv4Address& getNw_src() const;
    virtual Ipv4Address& getNw_srcForUpdate() { handleChange();return const_cast<Ipv4Address&>(const_cast<Ofp_match*>(this)->getNw_src());}
    virtual void setNw_src(const Ipv4Address& nw_src);
    virtual const Ipv4Address& getNw_dst() const;
    virtual Ipv4Address& getNw_dstForUpdate() { handleChange();return const_cast<Ipv4Address&>(const_cast<Ofp_match*>(this)->getNw_dst());}
    virtual void setNw_dst(const Ipv4Address& nw_dst);
    virtual uint16_t getTp_src() const;
    virtual void setTp_src(uint16_t tp_src);
    virtual uint16_t getTp_dst() const;
    virtual void setTp_dst(uint16_t tp_dst);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ofp_match& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ofp_match& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_OFP_MATCH_M_H

