//
// Generated file, do not edit! Created by nedtool 5.4 from openflowmessages/ofp_packet_in.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __INET_OFP_PACKET_IN_M_H
#define __INET_OFP_PACKET_IN_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


namespace inet {

class Ofp_packet_in;
class Ofp_packet_out;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/Units_m.h" // import inet.common.Units

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk


namespace inet {

/**
 * Enum generated from <tt>openflowmessages/ofp_packet_in.msg:21</tt> by nedtool.
 * <pre>
 * enum reason
 * {
 *     NO_MATCH = 0x00;
 *     ACTION = 0x01;
 * }
 * </pre>
 */
enum reason {
    NO_MATCH = 0x00,
    ACTION = 0x01
};

/**
 * Class generated from <tt>openflowmessages/ofp_packet_in.msg:25</tt> by nedtool.
 * <pre>
 * class Ofp_packet_in extends FieldsChunk
 * {
 *     uint32_t buffer_id;
 *     uint16_t total_len;
 *     uint16_t in_port;
 *     uint8_t reason;
 *     uint8_t pad = 0x00;
 *     chunkLength = B(12);
 * }
 * </pre>
 */
class Ofp_packet_in : public ::inet::FieldsChunk
{
  protected:
    uint32_t buffer_id = 0;
    uint16_t total_len = 0;
    uint16_t in_port = 0;
    uint8_t reason = 0;
    uint8_t pad = 0x00;

  private:
    void copy(const Ofp_packet_in& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Ofp_packet_in&);

  public:
    Ofp_packet_in();
    Ofp_packet_in(const Ofp_packet_in& other);
    virtual ~Ofp_packet_in();
    Ofp_packet_in& operator=(const Ofp_packet_in& other);
    virtual Ofp_packet_in *dup() const override {return new Ofp_packet_in(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual uint32_t getBuffer_id() const;
    virtual void setBuffer_id(uint32_t buffer_id);
    virtual uint16_t getTotal_len() const;
    virtual void setTotal_len(uint16_t total_len);
    virtual uint16_t getIn_port() const;
    virtual void setIn_port(uint16_t in_port);
    virtual uint8_t getReason() const;
    virtual void setReason(uint8_t reason);
    virtual uint8_t getPad() const;
    virtual void setPad(uint8_t pad);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ofp_packet_in& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ofp_packet_in& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>openflowmessages/ofp_packet_in.msg:34</tt> by nedtool.
 * <pre>
 * class Ofp_packet_out extends FieldsChunk
 * {
 *     uint32_t buffer_id;
 *     uint16_t in_port;
 *     uint16_t actions_len;
 *     chunkLength = B(8);
 * }
 * </pre>
 */
class Ofp_packet_out : public ::inet::FieldsChunk
{
  protected:
    uint32_t buffer_id = 0;
    uint16_t in_port = 0;
    uint16_t actions_len = 0;

  private:
    void copy(const Ofp_packet_out& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Ofp_packet_out&);

  public:
    Ofp_packet_out();
    Ofp_packet_out(const Ofp_packet_out& other);
    virtual ~Ofp_packet_out();
    Ofp_packet_out& operator=(const Ofp_packet_out& other);
    virtual Ofp_packet_out *dup() const override {return new Ofp_packet_out(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual uint32_t getBuffer_id() const;
    virtual void setBuffer_id(uint32_t buffer_id);
    virtual uint16_t getIn_port() const;
    virtual void setIn_port(uint16_t in_port);
    virtual uint16_t getActions_len() const;
    virtual void setActions_len(uint16_t actions_len);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ofp_packet_out& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ofp_packet_out& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_OFP_PACKET_IN_M_H

