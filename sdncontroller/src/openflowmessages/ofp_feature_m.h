//
// Generated file, do not edit! Created by nedtool 5.4 from openflowmessages/ofp_feature.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __INET_OFP_FEATURE_M_H
#define __INET_OFP_FEATURE_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


namespace inet {

class Ofp_feature;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/Units_m.h" // import inet.common.Units

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk


namespace inet {

/**
 * Enum generated from <tt>openflowmessages/ofp_feature.msg:21</tt> by nedtool.
 * <pre>
 * enum feature_capabilities
 * {
 *     FLOW_STATS = 0x00000001;
 *     TABLE_STATS = 0x00000002;
 *     PORT_STATS = 0x00000004;
 *     STP = 0x00000008;
 *     RESERVED = 0x00000010;
 *     IP_REASM = 0x00000020;
 *     QUEUE_STATS = 0x00000040;
 *     ARP_MATCH_IP = 0x00000080;
 * }
 * </pre>
 */
enum feature_capabilities {
    FLOW_STATS = 0x00000001,
    TABLE_STATS = 0x00000002,
    PORT_STATS = 0x00000004,
    STP = 0x00000008,
    RESERVED = 0x00000010,
    IP_REASM = 0x00000020,
    QUEUE_STATS = 0x00000040,
    ARP_MATCH_IP = 0x00000080
};

/**
 * Enum generated from <tt>openflowmessages/ofp_feature.msg:31</tt> by nedtool.
 * <pre>
 * enum feature_actions
 * {
 *     OFPF_OUTPUT = 0x00000001;
 *     OFPF_SET_VLAN_VID = 0x00000002;
 *     OFPF_SET_VLAN_PCP = 0x00000004;
 *     OFPF_STRIP_VLAN = 0x00000008;
 *     OFPF_SET_DL_SRC = 0x00000010;
 *     OFPF_SET_DL_DST = 0x00000020;
 *     OFPF_SET_NW_SRC = 0x00000040;
 *     OFPF_SET_NW_DST = 0x00000080;
 *     OFPF_SET_NW_TOS = 0x00000100;
 *     OFPF_SET_TP_SRC = 0x00000200;
 *     OFPF_SET_TP_DST = 0x00000400;
 *     OFPF_ENQUEUE = 0x00000800;
 * }
 * </pre>
 */
enum feature_actions {
    OFPF_OUTPUT = 0x00000001,
    OFPF_SET_VLAN_VID = 0x00000002,
    OFPF_SET_VLAN_PCP = 0x00000004,
    OFPF_STRIP_VLAN = 0x00000008,
    OFPF_SET_DL_SRC = 0x00000010,
    OFPF_SET_DL_DST = 0x00000020,
    OFPF_SET_NW_SRC = 0x00000040,
    OFPF_SET_NW_DST = 0x00000080,
    OFPF_SET_NW_TOS = 0x00000100,
    OFPF_SET_TP_SRC = 0x00000200,
    OFPF_SET_TP_DST = 0x00000400,
    OFPF_ENQUEUE = 0x00000800
};

/**
 * Class generated from <tt>openflowmessages/ofp_feature.msg:46</tt> by nedtool.
 * <pre>
 * class Ofp_feature extends FieldsChunk
 * {
 *     uint64_t datapath_id;
 *     uint32_t n_buffers;
 *     uint8_t n_tables;
 *     uint8_t pad[3];
 *     uint32_t capabilities;
 *     uint32_t actions;
 *     chunkLength = B(24);
 * 
 * }
 * </pre>
 */
class Ofp_feature : public ::inet::FieldsChunk
{
  protected:
    uint64_t datapath_id = 0;
    uint32_t n_buffers = 0;
    uint8_t n_tables = 0;
    uint8_t pad[3] = {0};
    uint32_t capabilities = 0;
    uint32_t actions = 0;

  private:
    void copy(const Ofp_feature& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Ofp_feature&);

  public:
    Ofp_feature();
    Ofp_feature(const Ofp_feature& other);
    virtual ~Ofp_feature();
    Ofp_feature& operator=(const Ofp_feature& other);
    virtual Ofp_feature *dup() const override {return new Ofp_feature(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual uint64_t getDatapath_id() const;
    virtual void setDatapath_id(uint64_t datapath_id);
    virtual uint32_t getN_buffers() const;
    virtual void setN_buffers(uint32_t n_buffers);
    virtual uint8_t getN_tables() const;
    virtual void setN_tables(uint8_t n_tables);
    virtual size_t getPadArraySize() const;
    virtual uint8_t getPad(size_t k) const;
    virtual void setPad(size_t k, uint8_t pad);
    virtual uint32_t getCapabilities() const;
    virtual void setCapabilities(uint32_t capabilities);
    virtual uint32_t getActions() const;
    virtual void setActions(uint32_t actions);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ofp_feature& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ofp_feature& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_OFP_FEATURE_M_H

